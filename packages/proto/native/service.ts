// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.3
// source: service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "service";

export interface ServiceMetadata {
  name: string;
  cwd: string;
  autorun: boolean;
  configs: ServiceConfig[];
}

export interface ServiceConfig {
  select?: Select | undefined;
}

export interface Select {
  name: string;
  default: string;
  options: string[];
}

function createBaseServiceMetadata(): ServiceMetadata {
  return { name: "", cwd: "", autorun: false, configs: [] };
}

export const ServiceMetadata: MessageFns<ServiceMetadata> = {
  encode(message: ServiceMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.cwd !== "") {
      writer.uint32(18).string(message.cwd);
    }
    if (message.autorun !== false) {
      writer.uint32(24).bool(message.autorun);
    }
    for (const v of message.configs) {
      ServiceConfig.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.cwd = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.autorun = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.configs.push(ServiceConfig.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceMetadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      cwd: isSet(object.cwd) ? globalThis.String(object.cwd) : "",
      autorun: isSet(object.autorun) ? globalThis.Boolean(object.autorun) : false,
      configs: globalThis.Array.isArray(object?.configs)
        ? object.configs.map((e: any) => ServiceConfig.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ServiceMetadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.cwd !== "") {
      obj.cwd = message.cwd;
    }
    if (message.autorun !== false) {
      obj.autorun = message.autorun;
    }
    if (message.configs?.length) {
      obj.configs = message.configs.map((e) => ServiceConfig.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServiceMetadata>, I>>(base?: I): ServiceMetadata {
    return ServiceMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServiceMetadata>, I>>(object: I): ServiceMetadata {
    const message = createBaseServiceMetadata();
    message.name = object.name ?? "";
    message.cwd = object.cwd ?? "";
    message.autorun = object.autorun ?? false;
    message.configs = object.configs?.map((e) => ServiceConfig.fromPartial(e)) || [];
    return message;
  },
};

function createBaseServiceConfig(): ServiceConfig {
  return { select: undefined };
}

export const ServiceConfig: MessageFns<ServiceConfig> = {
  encode(message: ServiceConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.select !== undefined) {
      Select.encode(message.select, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.select = Select.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceConfig {
    return { select: isSet(object.select) ? Select.fromJSON(object.select) : undefined };
  },

  toJSON(message: ServiceConfig): unknown {
    const obj: any = {};
    if (message.select !== undefined) {
      obj.select = Select.toJSON(message.select);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServiceConfig>, I>>(base?: I): ServiceConfig {
    return ServiceConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServiceConfig>, I>>(object: I): ServiceConfig {
    const message = createBaseServiceConfig();
    message.select = (object.select !== undefined && object.select !== null)
      ? Select.fromPartial(object.select)
      : undefined;
    return message;
  },
};

function createBaseSelect(): Select {
  return { name: "", default: "", options: [] };
}

export const Select: MessageFns<Select> = {
  encode(message: Select, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.default !== "") {
      writer.uint32(18).string(message.default);
    }
    for (const v of message.options) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Select {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSelect();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.default = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.options.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Select {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      default: isSet(object.default) ? globalThis.String(object.default) : "",
      options: globalThis.Array.isArray(object?.options) ? object.options.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: Select): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.default !== "") {
      obj.default = message.default;
    }
    if (message.options?.length) {
      obj.options = message.options;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Select>, I>>(base?: I): Select {
    return Select.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Select>, I>>(object: I): Select {
    const message = createBaseSelect();
    message.name = object.name ?? "";
    message.default = object.default ?? "";
    message.options = object.options?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
