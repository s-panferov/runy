// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: rpc.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientDuplexStream,
  type ClientOptions,
  type handleBidiStreamingCall,
  makeGenericClientConstructor,
  type Metadata as Metadata1,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { ProcessMetadata } from "./process.ts";
import { WorkspaceMetadata } from "./runy.ts";
import { ServiceMetadata } from "./service.ts";

export const protobufPackage = "rpc";

export interface RpcRequest {
  id?: string | undefined;
  initialize?: Initialize | undefined;
  metadata?: Metadata | undefined;
  render?: RenderService | undefined;
  stop?: StopService | undefined;
  process?: ProcessMetadata | undefined;
  signal?: SignalRequest | undefined;
}

export interface SignalRequest {
  resource: string;
  signal: string;
}

export interface Initialize {
  workspace: WorkspaceMetadata | undefined;
}

export interface Metadata {
  workspace: string;
  source: string;
  services: ServiceMetadata[];
  alive: string[];
}

export interface RenderService {
  service: string;
  cwd: string;
}

export interface StopService {
  service: string;
}

export interface RenderServiceResponse {
}

export interface StopServiceResponse {
}

export interface Empty {
}

export interface RpcResponse {
  id: string;
  error: RpcError | undefined;
  empty?: Empty | undefined;
  render?: RenderServiceResponse | undefined;
  stop?: StopServiceResponse | undefined;
}

export interface RpcEnvelope {
  request?: RpcRequest | undefined;
  response?: RpcResponse | undefined;
}

export interface RpcError {
  code: number;
  message: string;
  data: Uint8Array;
}

function createBaseRpcRequest(): RpcRequest {
  return {
    id: undefined,
    initialize: undefined,
    metadata: undefined,
    render: undefined,
    stop: undefined,
    process: undefined,
    signal: undefined,
  };
}

export const RpcRequest: MessageFns<RpcRequest> = {
  encode(message: RpcRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.initialize !== undefined) {
      Initialize.encode(message.initialize, writer.uint32(18).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    if (message.render !== undefined) {
      RenderService.encode(message.render, writer.uint32(34).fork()).join();
    }
    if (message.stop !== undefined) {
      StopService.encode(message.stop, writer.uint32(42).fork()).join();
    }
    if (message.process !== undefined) {
      ProcessMetadata.encode(message.process, writer.uint32(50).fork()).join();
    }
    if (message.signal !== undefined) {
      SignalRequest.encode(message.signal, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RpcRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRpcRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.initialize = Initialize.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.render = RenderService.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.stop = StopService.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.process = ProcessMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.signal = SignalRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RpcRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      initialize: isSet(object.initialize) ? Initialize.fromJSON(object.initialize) : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      render: isSet(object.render) ? RenderService.fromJSON(object.render) : undefined,
      stop: isSet(object.stop) ? StopService.fromJSON(object.stop) : undefined,
      process: isSet(object.process) ? ProcessMetadata.fromJSON(object.process) : undefined,
      signal: isSet(object.signal) ? SignalRequest.fromJSON(object.signal) : undefined,
    };
  },

  toJSON(message: RpcRequest): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.initialize !== undefined) {
      obj.initialize = Initialize.toJSON(message.initialize);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.render !== undefined) {
      obj.render = RenderService.toJSON(message.render);
    }
    if (message.stop !== undefined) {
      obj.stop = StopService.toJSON(message.stop);
    }
    if (message.process !== undefined) {
      obj.process = ProcessMetadata.toJSON(message.process);
    }
    if (message.signal !== undefined) {
      obj.signal = SignalRequest.toJSON(message.signal);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RpcRequest>, I>>(base?: I): RpcRequest {
    return RpcRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RpcRequest>, I>>(object: I): RpcRequest {
    const message = createBaseRpcRequest();
    message.id = object.id ?? undefined;
    message.initialize = (object.initialize !== undefined && object.initialize !== null)
      ? Initialize.fromPartial(object.initialize)
      : undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.render = (object.render !== undefined && object.render !== null)
      ? RenderService.fromPartial(object.render)
      : undefined;
    message.stop = (object.stop !== undefined && object.stop !== null)
      ? StopService.fromPartial(object.stop)
      : undefined;
    message.process = (object.process !== undefined && object.process !== null)
      ? ProcessMetadata.fromPartial(object.process)
      : undefined;
    message.signal = (object.signal !== undefined && object.signal !== null)
      ? SignalRequest.fromPartial(object.signal)
      : undefined;
    return message;
  },
};

function createBaseSignalRequest(): SignalRequest {
  return { resource: "", signal: "" };
}

export const SignalRequest: MessageFns<SignalRequest> = {
  encode(message: SignalRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resource !== "") {
      writer.uint32(10).string(message.resource);
    }
    if (message.signal !== "") {
      writer.uint32(18).string(message.signal);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignalRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.resource = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signal = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignalRequest {
    return {
      resource: isSet(object.resource) ? globalThis.String(object.resource) : "",
      signal: isSet(object.signal) ? globalThis.String(object.signal) : "",
    };
  },

  toJSON(message: SignalRequest): unknown {
    const obj: any = {};
    if (message.resource !== "") {
      obj.resource = message.resource;
    }
    if (message.signal !== "") {
      obj.signal = message.signal;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignalRequest>, I>>(base?: I): SignalRequest {
    return SignalRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignalRequest>, I>>(object: I): SignalRequest {
    const message = createBaseSignalRequest();
    message.resource = object.resource ?? "";
    message.signal = object.signal ?? "";
    return message;
  },
};

function createBaseInitialize(): Initialize {
  return { workspace: undefined };
}

export const Initialize: MessageFns<Initialize> = {
  encode(message: Initialize, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workspace !== undefined) {
      WorkspaceMetadata.encode(message.workspace, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Initialize {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitialize();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workspace = WorkspaceMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Initialize {
    return { workspace: isSet(object.workspace) ? WorkspaceMetadata.fromJSON(object.workspace) : undefined };
  },

  toJSON(message: Initialize): unknown {
    const obj: any = {};
    if (message.workspace !== undefined) {
      obj.workspace = WorkspaceMetadata.toJSON(message.workspace);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Initialize>, I>>(base?: I): Initialize {
    return Initialize.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Initialize>, I>>(object: I): Initialize {
    const message = createBaseInitialize();
    message.workspace = (object.workspace !== undefined && object.workspace !== null)
      ? WorkspaceMetadata.fromPartial(object.workspace)
      : undefined;
    return message;
  },
};

function createBaseMetadata(): Metadata {
  return { workspace: "", source: "", services: [], alive: [] };
}

export const Metadata: MessageFns<Metadata> = {
  encode(message: Metadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workspace !== "") {
      writer.uint32(10).string(message.workspace);
    }
    if (message.source !== "") {
      writer.uint32(18).string(message.source);
    }
    for (const v of message.services) {
      ServiceMetadata.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.alive) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Metadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workspace = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.source = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.services.push(ServiceMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.alive.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Metadata {
    return {
      workspace: isSet(object.workspace) ? globalThis.String(object.workspace) : "",
      source: isSet(object.source) ? globalThis.String(object.source) : "",
      services: globalThis.Array.isArray(object?.services)
        ? object.services.map((e: any) => ServiceMetadata.fromJSON(e))
        : [],
      alive: globalThis.Array.isArray(object?.alive) ? object.alive.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: Metadata): unknown {
    const obj: any = {};
    if (message.workspace !== "") {
      obj.workspace = message.workspace;
    }
    if (message.source !== "") {
      obj.source = message.source;
    }
    if (message.services?.length) {
      obj.services = message.services.map((e) => ServiceMetadata.toJSON(e));
    }
    if (message.alive?.length) {
      obj.alive = message.alive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Metadata>, I>>(base?: I): Metadata {
    return Metadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Metadata>, I>>(object: I): Metadata {
    const message = createBaseMetadata();
    message.workspace = object.workspace ?? "";
    message.source = object.source ?? "";
    message.services = object.services?.map((e) => ServiceMetadata.fromPartial(e)) || [];
    message.alive = object.alive?.map((e) => e) || [];
    return message;
  },
};

function createBaseRenderService(): RenderService {
  return { service: "", cwd: "" };
}

export const RenderService: MessageFns<RenderService> = {
  encode(message: RenderService, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.service !== "") {
      writer.uint32(10).string(message.service);
    }
    if (message.cwd !== "") {
      writer.uint32(18).string(message.cwd);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RenderService {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRenderService();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.service = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.cwd = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RenderService {
    return {
      service: isSet(object.service) ? globalThis.String(object.service) : "",
      cwd: isSet(object.cwd) ? globalThis.String(object.cwd) : "",
    };
  },

  toJSON(message: RenderService): unknown {
    const obj: any = {};
    if (message.service !== "") {
      obj.service = message.service;
    }
    if (message.cwd !== "") {
      obj.cwd = message.cwd;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RenderService>, I>>(base?: I): RenderService {
    return RenderService.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RenderService>, I>>(object: I): RenderService {
    const message = createBaseRenderService();
    message.service = object.service ?? "";
    message.cwd = object.cwd ?? "";
    return message;
  },
};

function createBaseStopService(): StopService {
  return { service: "" };
}

export const StopService: MessageFns<StopService> = {
  encode(message: StopService, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.service !== "") {
      writer.uint32(10).string(message.service);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StopService {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStopService();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.service = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StopService {
    return { service: isSet(object.service) ? globalThis.String(object.service) : "" };
  },

  toJSON(message: StopService): unknown {
    const obj: any = {};
    if (message.service !== "") {
      obj.service = message.service;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StopService>, I>>(base?: I): StopService {
    return StopService.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StopService>, I>>(object: I): StopService {
    const message = createBaseStopService();
    message.service = object.service ?? "";
    return message;
  },
};

function createBaseRenderServiceResponse(): RenderServiceResponse {
  return {};
}

export const RenderServiceResponse: MessageFns<RenderServiceResponse> = {
  encode(_: RenderServiceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RenderServiceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRenderServiceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RenderServiceResponse {
    return {};
  },

  toJSON(_: RenderServiceResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RenderServiceResponse>, I>>(base?: I): RenderServiceResponse {
    return RenderServiceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RenderServiceResponse>, I>>(_: I): RenderServiceResponse {
    const message = createBaseRenderServiceResponse();
    return message;
  },
};

function createBaseStopServiceResponse(): StopServiceResponse {
  return {};
}

export const StopServiceResponse: MessageFns<StopServiceResponse> = {
  encode(_: StopServiceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StopServiceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStopServiceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): StopServiceResponse {
    return {};
  },

  toJSON(_: StopServiceResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<StopServiceResponse>, I>>(base?: I): StopServiceResponse {
    return StopServiceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StopServiceResponse>, I>>(_: I): StopServiceResponse {
    const message = createBaseStopServiceResponse();
    return message;
  },
};

function createBaseEmpty(): Empty {
  return {};
}

export const Empty: MessageFns<Empty> = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Empty>, I>>(base?: I): Empty {
    return Empty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Empty>, I>>(_: I): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

function createBaseRpcResponse(): RpcResponse {
  return { id: "", error: undefined, empty: undefined, render: undefined, stop: undefined };
}

export const RpcResponse: MessageFns<RpcResponse> = {
  encode(message: RpcResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.error !== undefined) {
      RpcError.encode(message.error, writer.uint32(18).fork()).join();
    }
    if (message.empty !== undefined) {
      Empty.encode(message.empty, writer.uint32(26).fork()).join();
    }
    if (message.render !== undefined) {
      RenderServiceResponse.encode(message.render, writer.uint32(34).fork()).join();
    }
    if (message.stop !== undefined) {
      StopServiceResponse.encode(message.stop, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RpcResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRpcResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = RpcError.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.empty = Empty.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.render = RenderServiceResponse.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.stop = StopServiceResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RpcResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      error: isSet(object.error) ? RpcError.fromJSON(object.error) : undefined,
      empty: isSet(object.empty) ? Empty.fromJSON(object.empty) : undefined,
      render: isSet(object.render) ? RenderServiceResponse.fromJSON(object.render) : undefined,
      stop: isSet(object.stop) ? StopServiceResponse.fromJSON(object.stop) : undefined,
    };
  },

  toJSON(message: RpcResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.error !== undefined) {
      obj.error = RpcError.toJSON(message.error);
    }
    if (message.empty !== undefined) {
      obj.empty = Empty.toJSON(message.empty);
    }
    if (message.render !== undefined) {
      obj.render = RenderServiceResponse.toJSON(message.render);
    }
    if (message.stop !== undefined) {
      obj.stop = StopServiceResponse.toJSON(message.stop);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RpcResponse>, I>>(base?: I): RpcResponse {
    return RpcResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RpcResponse>, I>>(object: I): RpcResponse {
    const message = createBaseRpcResponse();
    message.id = object.id ?? "";
    message.error = (object.error !== undefined && object.error !== null)
      ? RpcError.fromPartial(object.error)
      : undefined;
    message.empty = (object.empty !== undefined && object.empty !== null) ? Empty.fromPartial(object.empty) : undefined;
    message.render = (object.render !== undefined && object.render !== null)
      ? RenderServiceResponse.fromPartial(object.render)
      : undefined;
    message.stop = (object.stop !== undefined && object.stop !== null)
      ? StopServiceResponse.fromPartial(object.stop)
      : undefined;
    return message;
  },
};

function createBaseRpcEnvelope(): RpcEnvelope {
  return { request: undefined, response: undefined };
}

export const RpcEnvelope: MessageFns<RpcEnvelope> = {
  encode(message: RpcEnvelope, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.request !== undefined) {
      RpcRequest.encode(message.request, writer.uint32(10).fork()).join();
    }
    if (message.response !== undefined) {
      RpcResponse.encode(message.response, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RpcEnvelope {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRpcEnvelope();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.request = RpcRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.response = RpcResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RpcEnvelope {
    return {
      request: isSet(object.request) ? RpcRequest.fromJSON(object.request) : undefined,
      response: isSet(object.response) ? RpcResponse.fromJSON(object.response) : undefined,
    };
  },

  toJSON(message: RpcEnvelope): unknown {
    const obj: any = {};
    if (message.request !== undefined) {
      obj.request = RpcRequest.toJSON(message.request);
    }
    if (message.response !== undefined) {
      obj.response = RpcResponse.toJSON(message.response);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RpcEnvelope>, I>>(base?: I): RpcEnvelope {
    return RpcEnvelope.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RpcEnvelope>, I>>(object: I): RpcEnvelope {
    const message = createBaseRpcEnvelope();
    message.request = (object.request !== undefined && object.request !== null)
      ? RpcRequest.fromPartial(object.request)
      : undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? RpcResponse.fromPartial(object.response)
      : undefined;
    return message;
  },
};

function createBaseRpcError(): RpcError {
  return { code: 0, message: "", data: new Uint8Array(0) };
}

export const RpcError: MessageFns<RpcError> = {
  encode(message: RpcError, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.data.length !== 0) {
      writer.uint32(26).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RpcError {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRpcError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RpcError {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
    };
  },

  toJSON(message: RpcError): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RpcError>, I>>(base?: I): RpcError {
    return RpcError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RpcError>, I>>(object: I): RpcError {
    const message = createBaseRpcError();
    message.code = object.code ?? 0;
    message.message = object.message ?? "";
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

export type RpcServiceService = typeof RpcServiceService;
export const RpcServiceService = {
  streamRpc: {
    path: "/rpc.RpcService/StreamRpc",
    requestStream: true,
    responseStream: true,
    requestSerialize: (value: RpcEnvelope): Buffer => Buffer.from(RpcEnvelope.encode(value).finish()),
    requestDeserialize: (value: Buffer): RpcEnvelope => RpcEnvelope.decode(value),
    responseSerialize: (value: RpcEnvelope): Buffer => Buffer.from(RpcEnvelope.encode(value).finish()),
    responseDeserialize: (value: Buffer): RpcEnvelope => RpcEnvelope.decode(value),
  },
} as const;

export interface RpcServiceServer extends UntypedServiceImplementation {
  streamRpc: handleBidiStreamingCall<RpcEnvelope, RpcEnvelope>;
}

export interface RpcServiceClient extends Client {
  streamRpc(): ClientDuplexStream<RpcEnvelope, RpcEnvelope>;
  streamRpc(options: Partial<CallOptions>): ClientDuplexStream<RpcEnvelope, RpcEnvelope>;
  streamRpc(metadata: Metadata1, options?: Partial<CallOptions>): ClientDuplexStream<RpcEnvelope, RpcEnvelope>;
}

export const RpcServiceClient = makeGenericClientConstructor(RpcServiceService, "rpc.RpcService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): RpcServiceClient;
  service: typeof RpcServiceService;
  serviceName: string;
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
