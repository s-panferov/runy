// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: process.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "process";

export interface Watch {
  prefix: string;
  include: string[];
  exclude: string[];
}

export interface ProcessMetadata {
  service: string;
  alias: string;
  cmd: string;
  cwd?: string | undefined;
  restart: RestartStrategy | undefined;
  args: string[];
  env: { [key: string]: string };
  watch?: Watch | undefined;
}

export interface ProcessMetadata_EnvEntry {
  key: string;
  value: string;
}

export interface RestartStrategy {
  never?: NeverRestart | undefined;
  always?: AlwaysRestart | undefined;
  exponential?: ExponentialRestart | undefined;
  fixed?: FixedRestart | undefined;
}

export interface NeverRestart {
}

export interface AlwaysRestart {
}

export interface ExponentialRestart {
  initialDelay: number;
  maxDelay: number;
  multiplier: number;
  maxRestarts?: number | undefined;
}

export interface FixedRestart {
  delay: number;
  maxRestarts?: number | undefined;
}

function createBaseWatch(): Watch {
  return { prefix: "", include: [], exclude: [] };
}

export const Watch: MessageFns<Watch> = {
  encode(message: Watch, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.prefix !== "") {
      writer.uint32(10).string(message.prefix);
    }
    for (const v of message.include) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.exclude) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Watch {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.prefix = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.include.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.exclude.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Watch {
    return {
      prefix: isSet(object.prefix) ? globalThis.String(object.prefix) : "",
      include: globalThis.Array.isArray(object?.include) ? object.include.map((e: any) => globalThis.String(e)) : [],
      exclude: globalThis.Array.isArray(object?.exclude) ? object.exclude.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: Watch): unknown {
    const obj: any = {};
    if (message.prefix !== "") {
      obj.prefix = message.prefix;
    }
    if (message.include?.length) {
      obj.include = message.include;
    }
    if (message.exclude?.length) {
      obj.exclude = message.exclude;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Watch>, I>>(base?: I): Watch {
    return Watch.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Watch>, I>>(object: I): Watch {
    const message = createBaseWatch();
    message.prefix = object.prefix ?? "";
    message.include = object.include?.map((e) => e) || [];
    message.exclude = object.exclude?.map((e) => e) || [];
    return message;
  },
};

function createBaseProcessMetadata(): ProcessMetadata {
  return { service: "", alias: "", cmd: "", cwd: undefined, restart: undefined, args: [], env: {}, watch: undefined };
}

export const ProcessMetadata: MessageFns<ProcessMetadata> = {
  encode(message: ProcessMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.service !== "") {
      writer.uint32(10).string(message.service);
    }
    if (message.alias !== "") {
      writer.uint32(18).string(message.alias);
    }
    if (message.cmd !== "") {
      writer.uint32(26).string(message.cmd);
    }
    if (message.cwd !== undefined) {
      writer.uint32(34).string(message.cwd);
    }
    if (message.restart !== undefined) {
      RestartStrategy.encode(message.restart, writer.uint32(42).fork()).join();
    }
    for (const v of message.args) {
      writer.uint32(50).string(v!);
    }
    Object.entries(message.env).forEach(([key, value]) => {
      ProcessMetadata_EnvEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    if (message.watch !== undefined) {
      Watch.encode(message.watch, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.service = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.alias = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.cmd = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.cwd = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.restart = RestartStrategy.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.args.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          const entry7 = ProcessMetadata_EnvEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.env[entry7.key] = entry7.value;
          }
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.watch = Watch.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessMetadata {
    return {
      service: isSet(object.service) ? globalThis.String(object.service) : "",
      alias: isSet(object.alias) ? globalThis.String(object.alias) : "",
      cmd: isSet(object.cmd) ? globalThis.String(object.cmd) : "",
      cwd: isSet(object.cwd) ? globalThis.String(object.cwd) : undefined,
      restart: isSet(object.restart) ? RestartStrategy.fromJSON(object.restart) : undefined,
      args: globalThis.Array.isArray(object?.args) ? object.args.map((e: any) => globalThis.String(e)) : [],
      env: isObject(object.env)
        ? Object.entries(object.env).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      watch: isSet(object.watch) ? Watch.fromJSON(object.watch) : undefined,
    };
  },

  toJSON(message: ProcessMetadata): unknown {
    const obj: any = {};
    if (message.service !== "") {
      obj.service = message.service;
    }
    if (message.alias !== "") {
      obj.alias = message.alias;
    }
    if (message.cmd !== "") {
      obj.cmd = message.cmd;
    }
    if (message.cwd !== undefined) {
      obj.cwd = message.cwd;
    }
    if (message.restart !== undefined) {
      obj.restart = RestartStrategy.toJSON(message.restart);
    }
    if (message.args?.length) {
      obj.args = message.args;
    }
    if (message.env) {
      const entries = Object.entries(message.env);
      if (entries.length > 0) {
        obj.env = {};
        entries.forEach(([k, v]) => {
          obj.env[k] = v;
        });
      }
    }
    if (message.watch !== undefined) {
      obj.watch = Watch.toJSON(message.watch);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProcessMetadata>, I>>(base?: I): ProcessMetadata {
    return ProcessMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProcessMetadata>, I>>(object: I): ProcessMetadata {
    const message = createBaseProcessMetadata();
    message.service = object.service ?? "";
    message.alias = object.alias ?? "";
    message.cmd = object.cmd ?? "";
    message.cwd = object.cwd ?? undefined;
    message.restart = (object.restart !== undefined && object.restart !== null)
      ? RestartStrategy.fromPartial(object.restart)
      : undefined;
    message.args = object.args?.map((e) => e) || [];
    message.env = Object.entries(object.env ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.watch = (object.watch !== undefined && object.watch !== null) ? Watch.fromPartial(object.watch) : undefined;
    return message;
  },
};

function createBaseProcessMetadata_EnvEntry(): ProcessMetadata_EnvEntry {
  return { key: "", value: "" };
}

export const ProcessMetadata_EnvEntry: MessageFns<ProcessMetadata_EnvEntry> = {
  encode(message: ProcessMetadata_EnvEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessMetadata_EnvEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessMetadata_EnvEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessMetadata_EnvEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ProcessMetadata_EnvEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProcessMetadata_EnvEntry>, I>>(base?: I): ProcessMetadata_EnvEntry {
    return ProcessMetadata_EnvEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProcessMetadata_EnvEntry>, I>>(object: I): ProcessMetadata_EnvEntry {
    const message = createBaseProcessMetadata_EnvEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseRestartStrategy(): RestartStrategy {
  return { never: undefined, always: undefined, exponential: undefined, fixed: undefined };
}

export const RestartStrategy: MessageFns<RestartStrategy> = {
  encode(message: RestartStrategy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.never !== undefined) {
      NeverRestart.encode(message.never, writer.uint32(10).fork()).join();
    }
    if (message.always !== undefined) {
      AlwaysRestart.encode(message.always, writer.uint32(18).fork()).join();
    }
    if (message.exponential !== undefined) {
      ExponentialRestart.encode(message.exponential, writer.uint32(26).fork()).join();
    }
    if (message.fixed !== undefined) {
      FixedRestart.encode(message.fixed, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestartStrategy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestartStrategy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.never = NeverRestart.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.always = AlwaysRestart.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.exponential = ExponentialRestart.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.fixed = FixedRestart.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RestartStrategy {
    return {
      never: isSet(object.never) ? NeverRestart.fromJSON(object.never) : undefined,
      always: isSet(object.always) ? AlwaysRestart.fromJSON(object.always) : undefined,
      exponential: isSet(object.exponential) ? ExponentialRestart.fromJSON(object.exponential) : undefined,
      fixed: isSet(object.fixed) ? FixedRestart.fromJSON(object.fixed) : undefined,
    };
  },

  toJSON(message: RestartStrategy): unknown {
    const obj: any = {};
    if (message.never !== undefined) {
      obj.never = NeverRestart.toJSON(message.never);
    }
    if (message.always !== undefined) {
      obj.always = AlwaysRestart.toJSON(message.always);
    }
    if (message.exponential !== undefined) {
      obj.exponential = ExponentialRestart.toJSON(message.exponential);
    }
    if (message.fixed !== undefined) {
      obj.fixed = FixedRestart.toJSON(message.fixed);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RestartStrategy>, I>>(base?: I): RestartStrategy {
    return RestartStrategy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RestartStrategy>, I>>(object: I): RestartStrategy {
    const message = createBaseRestartStrategy();
    message.never = (object.never !== undefined && object.never !== null)
      ? NeverRestart.fromPartial(object.never)
      : undefined;
    message.always = (object.always !== undefined && object.always !== null)
      ? AlwaysRestart.fromPartial(object.always)
      : undefined;
    message.exponential = (object.exponential !== undefined && object.exponential !== null)
      ? ExponentialRestart.fromPartial(object.exponential)
      : undefined;
    message.fixed = (object.fixed !== undefined && object.fixed !== null)
      ? FixedRestart.fromPartial(object.fixed)
      : undefined;
    return message;
  },
};

function createBaseNeverRestart(): NeverRestart {
  return {};
}

export const NeverRestart: MessageFns<NeverRestart> = {
  encode(_: NeverRestart, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NeverRestart {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNeverRestart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NeverRestart {
    return {};
  },

  toJSON(_: NeverRestart): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NeverRestart>, I>>(base?: I): NeverRestart {
    return NeverRestart.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NeverRestart>, I>>(_: I): NeverRestart {
    const message = createBaseNeverRestart();
    return message;
  },
};

function createBaseAlwaysRestart(): AlwaysRestart {
  return {};
}

export const AlwaysRestart: MessageFns<AlwaysRestart> = {
  encode(_: AlwaysRestart, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AlwaysRestart {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAlwaysRestart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AlwaysRestart {
    return {};
  },

  toJSON(_: AlwaysRestart): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<AlwaysRestart>, I>>(base?: I): AlwaysRestart {
    return AlwaysRestart.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AlwaysRestart>, I>>(_: I): AlwaysRestart {
    const message = createBaseAlwaysRestart();
    return message;
  },
};

function createBaseExponentialRestart(): ExponentialRestart {
  return { initialDelay: 0, maxDelay: 0, multiplier: 0, maxRestarts: undefined };
}

export const ExponentialRestart: MessageFns<ExponentialRestart> = {
  encode(message: ExponentialRestart, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.initialDelay !== 0) {
      writer.uint32(8).uint64(message.initialDelay);
    }
    if (message.maxDelay !== 0) {
      writer.uint32(16).uint64(message.maxDelay);
    }
    if (message.multiplier !== 0) {
      writer.uint32(25).double(message.multiplier);
    }
    if (message.maxRestarts !== undefined) {
      writer.uint32(32).uint32(message.maxRestarts);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExponentialRestart {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExponentialRestart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.initialDelay = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.maxDelay = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.multiplier = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.maxRestarts = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExponentialRestart {
    return {
      initialDelay: isSet(object.initialDelay) ? globalThis.Number(object.initialDelay) : 0,
      maxDelay: isSet(object.maxDelay) ? globalThis.Number(object.maxDelay) : 0,
      multiplier: isSet(object.multiplier) ? globalThis.Number(object.multiplier) : 0,
      maxRestarts: isSet(object.maxRestarts) ? globalThis.Number(object.maxRestarts) : undefined,
    };
  },

  toJSON(message: ExponentialRestart): unknown {
    const obj: any = {};
    if (message.initialDelay !== 0) {
      obj.initialDelay = Math.round(message.initialDelay);
    }
    if (message.maxDelay !== 0) {
      obj.maxDelay = Math.round(message.maxDelay);
    }
    if (message.multiplier !== 0) {
      obj.multiplier = message.multiplier;
    }
    if (message.maxRestarts !== undefined) {
      obj.maxRestarts = Math.round(message.maxRestarts);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExponentialRestart>, I>>(base?: I): ExponentialRestart {
    return ExponentialRestart.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExponentialRestart>, I>>(object: I): ExponentialRestart {
    const message = createBaseExponentialRestart();
    message.initialDelay = object.initialDelay ?? 0;
    message.maxDelay = object.maxDelay ?? 0;
    message.multiplier = object.multiplier ?? 0;
    message.maxRestarts = object.maxRestarts ?? undefined;
    return message;
  },
};

function createBaseFixedRestart(): FixedRestart {
  return { delay: 0, maxRestarts: undefined };
}

export const FixedRestart: MessageFns<FixedRestart> = {
  encode(message: FixedRestart, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delay !== 0) {
      writer.uint32(8).uint64(message.delay);
    }
    if (message.maxRestarts !== undefined) {
      writer.uint32(16).uint32(message.maxRestarts);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FixedRestart {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFixedRestart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.delay = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.maxRestarts = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FixedRestart {
    return {
      delay: isSet(object.delay) ? globalThis.Number(object.delay) : 0,
      maxRestarts: isSet(object.maxRestarts) ? globalThis.Number(object.maxRestarts) : undefined,
    };
  },

  toJSON(message: FixedRestart): unknown {
    const obj: any = {};
    if (message.delay !== 0) {
      obj.delay = Math.round(message.delay);
    }
    if (message.maxRestarts !== undefined) {
      obj.maxRestarts = Math.round(message.maxRestarts);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FixedRestart>, I>>(base?: I): FixedRestart {
    return FixedRestart.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FixedRestart>, I>>(object: I): FixedRestart {
    const message = createBaseFixedRestart();
    message.delay = object.delay ?? 0;
    message.maxRestarts = object.maxRestarts ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
