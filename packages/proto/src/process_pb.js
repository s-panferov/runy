// source: process.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.process.AlwaysRestart', null, global);
goog.exportSymbol('proto.process.ExponentialRestart', null, global);
goog.exportSymbol('proto.process.FixedRestart', null, global);
goog.exportSymbol('proto.process.NeverRestart', null, global);
goog.exportSymbol('proto.process.ProcessMetadata', null, global);
goog.exportSymbol('proto.process.RestartStrategy', null, global);
goog.exportSymbol('proto.process.RestartStrategy.RestartStrategyKindCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.process.ProcessMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.process.ProcessMetadata.repeatedFields_, null);
};
goog.inherits(proto.process.ProcessMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.process.ProcessMetadata.displayName = 'proto.process.ProcessMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.process.RestartStrategy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.process.RestartStrategy.oneofGroups_);
};
goog.inherits(proto.process.RestartStrategy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.process.RestartStrategy.displayName = 'proto.process.RestartStrategy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.process.NeverRestart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.process.NeverRestart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.process.NeverRestart.displayName = 'proto.process.NeverRestart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.process.AlwaysRestart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.process.AlwaysRestart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.process.AlwaysRestart.displayName = 'proto.process.AlwaysRestart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.process.ExponentialRestart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.process.ExponentialRestart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.process.ExponentialRestart.displayName = 'proto.process.ExponentialRestart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.process.FixedRestart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.process.FixedRestart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.process.FixedRestart.displayName = 'proto.process.FixedRestart';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.process.ProcessMetadata.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.process.ProcessMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.process.ProcessMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.process.ProcessMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.process.ProcessMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
service: jspb.Message.getFieldWithDefault(msg, 1, ""),
alias: jspb.Message.getFieldWithDefault(msg, 2, ""),
cmd: jspb.Message.getFieldWithDefault(msg, 3, ""),
cwd: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
restart: (f = msg.getRestart()) && proto.process.RestartStrategy.toObject(includeInstance, f),
argsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
envMap: (f = msg.getEnvMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.process.ProcessMetadata}
 */
proto.process.ProcessMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.process.ProcessMetadata;
  return proto.process.ProcessMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.process.ProcessMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.process.ProcessMetadata}
 */
proto.process.ProcessMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setService(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlias(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCmd(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCwd(value);
      break;
    case 5:
      var value = new proto.process.RestartStrategy;
      reader.readMessage(value,proto.process.RestartStrategy.deserializeBinaryFromReader);
      msg.setRestart(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addArgs(value);
      break;
    case 7:
      var value = msg.getEnvMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.process.ProcessMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.process.ProcessMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.process.ProcessMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.process.ProcessMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getService();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAlias();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCmd();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRestart();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.process.RestartStrategy.serializeBinaryToWriter
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getEnvMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string service = 1;
 * @return {string}
 */
proto.process.ProcessMetadata.prototype.getService = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.process.ProcessMetadata} returns this
 */
proto.process.ProcessMetadata.prototype.setService = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string alias = 2;
 * @return {string}
 */
proto.process.ProcessMetadata.prototype.getAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.process.ProcessMetadata} returns this
 */
proto.process.ProcessMetadata.prototype.setAlias = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string cmd = 3;
 * @return {string}
 */
proto.process.ProcessMetadata.prototype.getCmd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.process.ProcessMetadata} returns this
 */
proto.process.ProcessMetadata.prototype.setCmd = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string cwd = 4;
 * @return {string}
 */
proto.process.ProcessMetadata.prototype.getCwd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.process.ProcessMetadata} returns this
 */
proto.process.ProcessMetadata.prototype.setCwd = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.process.ProcessMetadata} returns this
 */
proto.process.ProcessMetadata.prototype.clearCwd = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.process.ProcessMetadata.prototype.hasCwd = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RestartStrategy restart = 5;
 * @return {?proto.process.RestartStrategy}
 */
proto.process.ProcessMetadata.prototype.getRestart = function() {
  return /** @type{?proto.process.RestartStrategy} */ (
    jspb.Message.getWrapperField(this, proto.process.RestartStrategy, 5));
};


/**
 * @param {?proto.process.RestartStrategy|undefined} value
 * @return {!proto.process.ProcessMetadata} returns this
*/
proto.process.ProcessMetadata.prototype.setRestart = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.process.ProcessMetadata} returns this
 */
proto.process.ProcessMetadata.prototype.clearRestart = function() {
  return this.setRestart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.process.ProcessMetadata.prototype.hasRestart = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated string args = 6;
 * @return {!Array<string>}
 */
proto.process.ProcessMetadata.prototype.getArgsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.process.ProcessMetadata} returns this
 */
proto.process.ProcessMetadata.prototype.setArgsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.process.ProcessMetadata} returns this
 */
proto.process.ProcessMetadata.prototype.addArgs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.process.ProcessMetadata} returns this
 */
proto.process.ProcessMetadata.prototype.clearArgsList = function() {
  return this.setArgsList([]);
};


/**
 * map<string, string> env = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.process.ProcessMetadata.prototype.getEnvMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.process.ProcessMetadata} returns this
 */
proto.process.ProcessMetadata.prototype.clearEnvMap = function() {
  this.getEnvMap().clear();
  return this;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.process.RestartStrategy.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.process.RestartStrategy.RestartStrategyKindCase = {
  RESTART_STRATEGY_KIND_NOT_SET: 0,
  NEVER: 1,
  ALWAYS: 2,
  EXPONENTIAL: 3,
  FIXED: 4
};

/**
 * @return {proto.process.RestartStrategy.RestartStrategyKindCase}
 */
proto.process.RestartStrategy.prototype.getRestartStrategyKindCase = function() {
  return /** @type {proto.process.RestartStrategy.RestartStrategyKindCase} */(jspb.Message.computeOneofCase(this, proto.process.RestartStrategy.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.process.RestartStrategy.prototype.toObject = function(opt_includeInstance) {
  return proto.process.RestartStrategy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.process.RestartStrategy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.process.RestartStrategy.toObject = function(includeInstance, msg) {
  var f, obj = {
never: (f = msg.getNever()) && proto.process.NeverRestart.toObject(includeInstance, f),
always: (f = msg.getAlways()) && proto.process.AlwaysRestart.toObject(includeInstance, f),
exponential: (f = msg.getExponential()) && proto.process.ExponentialRestart.toObject(includeInstance, f),
fixed: (f = msg.getFixed()) && proto.process.FixedRestart.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.process.RestartStrategy}
 */
proto.process.RestartStrategy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.process.RestartStrategy;
  return proto.process.RestartStrategy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.process.RestartStrategy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.process.RestartStrategy}
 */
proto.process.RestartStrategy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.process.NeverRestart;
      reader.readMessage(value,proto.process.NeverRestart.deserializeBinaryFromReader);
      msg.setNever(value);
      break;
    case 2:
      var value = new proto.process.AlwaysRestart;
      reader.readMessage(value,proto.process.AlwaysRestart.deserializeBinaryFromReader);
      msg.setAlways(value);
      break;
    case 3:
      var value = new proto.process.ExponentialRestart;
      reader.readMessage(value,proto.process.ExponentialRestart.deserializeBinaryFromReader);
      msg.setExponential(value);
      break;
    case 4:
      var value = new proto.process.FixedRestart;
      reader.readMessage(value,proto.process.FixedRestart.deserializeBinaryFromReader);
      msg.setFixed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.process.RestartStrategy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.process.RestartStrategy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.process.RestartStrategy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.process.RestartStrategy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNever();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.process.NeverRestart.serializeBinaryToWriter
    );
  }
  f = message.getAlways();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.process.AlwaysRestart.serializeBinaryToWriter
    );
  }
  f = message.getExponential();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.process.ExponentialRestart.serializeBinaryToWriter
    );
  }
  f = message.getFixed();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.process.FixedRestart.serializeBinaryToWriter
    );
  }
};


/**
 * optional NeverRestart never = 1;
 * @return {?proto.process.NeverRestart}
 */
proto.process.RestartStrategy.prototype.getNever = function() {
  return /** @type{?proto.process.NeverRestart} */ (
    jspb.Message.getWrapperField(this, proto.process.NeverRestart, 1));
};


/**
 * @param {?proto.process.NeverRestart|undefined} value
 * @return {!proto.process.RestartStrategy} returns this
*/
proto.process.RestartStrategy.prototype.setNever = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.process.RestartStrategy.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.process.RestartStrategy} returns this
 */
proto.process.RestartStrategy.prototype.clearNever = function() {
  return this.setNever(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.process.RestartStrategy.prototype.hasNever = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AlwaysRestart always = 2;
 * @return {?proto.process.AlwaysRestart}
 */
proto.process.RestartStrategy.prototype.getAlways = function() {
  return /** @type{?proto.process.AlwaysRestart} */ (
    jspb.Message.getWrapperField(this, proto.process.AlwaysRestart, 2));
};


/**
 * @param {?proto.process.AlwaysRestart|undefined} value
 * @return {!proto.process.RestartStrategy} returns this
*/
proto.process.RestartStrategy.prototype.setAlways = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.process.RestartStrategy.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.process.RestartStrategy} returns this
 */
proto.process.RestartStrategy.prototype.clearAlways = function() {
  return this.setAlways(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.process.RestartStrategy.prototype.hasAlways = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ExponentialRestart exponential = 3;
 * @return {?proto.process.ExponentialRestart}
 */
proto.process.RestartStrategy.prototype.getExponential = function() {
  return /** @type{?proto.process.ExponentialRestart} */ (
    jspb.Message.getWrapperField(this, proto.process.ExponentialRestart, 3));
};


/**
 * @param {?proto.process.ExponentialRestart|undefined} value
 * @return {!proto.process.RestartStrategy} returns this
*/
proto.process.RestartStrategy.prototype.setExponential = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.process.RestartStrategy.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.process.RestartStrategy} returns this
 */
proto.process.RestartStrategy.prototype.clearExponential = function() {
  return this.setExponential(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.process.RestartStrategy.prototype.hasExponential = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional FixedRestart fixed = 4;
 * @return {?proto.process.FixedRestart}
 */
proto.process.RestartStrategy.prototype.getFixed = function() {
  return /** @type{?proto.process.FixedRestart} */ (
    jspb.Message.getWrapperField(this, proto.process.FixedRestart, 4));
};


/**
 * @param {?proto.process.FixedRestart|undefined} value
 * @return {!proto.process.RestartStrategy} returns this
*/
proto.process.RestartStrategy.prototype.setFixed = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.process.RestartStrategy.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.process.RestartStrategy} returns this
 */
proto.process.RestartStrategy.prototype.clearFixed = function() {
  return this.setFixed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.process.RestartStrategy.prototype.hasFixed = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.process.NeverRestart.prototype.toObject = function(opt_includeInstance) {
  return proto.process.NeverRestart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.process.NeverRestart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.process.NeverRestart.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.process.NeverRestart}
 */
proto.process.NeverRestart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.process.NeverRestart;
  return proto.process.NeverRestart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.process.NeverRestart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.process.NeverRestart}
 */
proto.process.NeverRestart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.process.NeverRestart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.process.NeverRestart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.process.NeverRestart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.process.NeverRestart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.process.AlwaysRestart.prototype.toObject = function(opt_includeInstance) {
  return proto.process.AlwaysRestart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.process.AlwaysRestart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.process.AlwaysRestart.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.process.AlwaysRestart}
 */
proto.process.AlwaysRestart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.process.AlwaysRestart;
  return proto.process.AlwaysRestart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.process.AlwaysRestart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.process.AlwaysRestart}
 */
proto.process.AlwaysRestart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.process.AlwaysRestart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.process.AlwaysRestart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.process.AlwaysRestart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.process.AlwaysRestart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.process.ExponentialRestart.prototype.toObject = function(opt_includeInstance) {
  return proto.process.ExponentialRestart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.process.ExponentialRestart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.process.ExponentialRestart.toObject = function(includeInstance, msg) {
  var f, obj = {
initialDelay: jspb.Message.getFieldWithDefault(msg, 1, 0),
maxDelay: jspb.Message.getFieldWithDefault(msg, 2, 0),
multiplier: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
maxRestarts: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.process.ExponentialRestart}
 */
proto.process.ExponentialRestart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.process.ExponentialRestart;
  return proto.process.ExponentialRestart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.process.ExponentialRestart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.process.ExponentialRestart}
 */
proto.process.ExponentialRestart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setInitialDelay(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxDelay(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMultiplier(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxRestarts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.process.ExponentialRestart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.process.ExponentialRestart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.process.ExponentialRestart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.process.ExponentialRestart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitialDelay();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMaxDelay();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMultiplier();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint64 initial_delay = 1;
 * @return {number}
 */
proto.process.ExponentialRestart.prototype.getInitialDelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.process.ExponentialRestart} returns this
 */
proto.process.ExponentialRestart.prototype.setInitialDelay = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 max_delay = 2;
 * @return {number}
 */
proto.process.ExponentialRestart.prototype.getMaxDelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.process.ExponentialRestart} returns this
 */
proto.process.ExponentialRestart.prototype.setMaxDelay = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional double multiplier = 3;
 * @return {number}
 */
proto.process.ExponentialRestart.prototype.getMultiplier = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.process.ExponentialRestart} returns this
 */
proto.process.ExponentialRestart.prototype.setMultiplier = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional uint32 max_restarts = 4;
 * @return {number}
 */
proto.process.ExponentialRestart.prototype.getMaxRestarts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.process.ExponentialRestart} returns this
 */
proto.process.ExponentialRestart.prototype.setMaxRestarts = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.process.ExponentialRestart} returns this
 */
proto.process.ExponentialRestart.prototype.clearMaxRestarts = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.process.ExponentialRestart.prototype.hasMaxRestarts = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.process.FixedRestart.prototype.toObject = function(opt_includeInstance) {
  return proto.process.FixedRestart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.process.FixedRestart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.process.FixedRestart.toObject = function(includeInstance, msg) {
  var f, obj = {
delay: jspb.Message.getFieldWithDefault(msg, 1, 0),
maxRestarts: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.process.FixedRestart}
 */
proto.process.FixedRestart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.process.FixedRestart;
  return proto.process.FixedRestart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.process.FixedRestart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.process.FixedRestart}
 */
proto.process.FixedRestart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDelay(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxRestarts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.process.FixedRestart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.process.FixedRestart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.process.FixedRestart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.process.FixedRestart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDelay();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint64 delay = 1;
 * @return {number}
 */
proto.process.FixedRestart.prototype.getDelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.process.FixedRestart} returns this
 */
proto.process.FixedRestart.prototype.setDelay = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 max_restarts = 2;
 * @return {number}
 */
proto.process.FixedRestart.prototype.getMaxRestarts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.process.FixedRestart} returns this
 */
proto.process.FixedRestart.prototype.setMaxRestarts = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.process.FixedRestart} returns this
 */
proto.process.FixedRestart.prototype.clearMaxRestarts = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.process.FixedRestart.prototype.hasMaxRestarts = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.process);
